#!/bin/sh

# This is a list table of devices nodes and 
# permissions to create in the container
# /dev directory.
#
# Columns are:
# device type major minor perm
devtab='
initctl   p   -   -   600
pts       d   -   -   755
shm       d   -   -   1777
null      c   1   3   666
zero      c   1   5   666
full      c   1   7   666
random    c   1   8   666
urandom   c   1   9   666
tty0      c   4   0   666
tty1      c   4   1   666
tty2      c   4   2   666
tty3      c   4   3   666
tty       c   5   0   666
console   c   5   1   600
ptmx      c   5   2   666
-         c   136 *   -
'

die () {
	echo "$(basename $0): ERROR: $*" >&2
	exit 1
}

usage ()
{
	cat <<-EOF
	lxc-archlinux
	=============

	This template installs a minimal Arch Linux container
	using the "pacstrap" tool.

	Usage
	-----

	    $(basename $0) -n|--name=*name* [-p|--path=*path*] ...
	    $(basename $0) -h|--help

	Options
	-------

	Mandatory arguments:

	* -n, --name *name* -- container name
	* -p, --path *path* -- path to container directory

	Optional arguments:

	* -P, --packages *packages* -- comma separated list of additional
	  packages to install.

	EOF
	return 0
}

# Install Arch Linux into ${rootfs_path}.  We always install the
# "lxc" package because this is required to run lxc-execute.
install_arch () {
	mkdir -p ${rootfs_path}
	pacstrap -c ${rootfs_path} base lxc ${additional_packages//,/ }
}

generate_device_permissions () {
	echo "${devtab}" |
	egrep -v '^#|^$' |
	while read dev type major minor mode; do
		case $type in
			(b|c)	echo lxc.cgroup.devices.allow = $type ${major}:${minor} rwm
				;;
		esac
	done
}

generate_lxc_conf () {
	# We *append* to ${config_path} because the user may have
	# provided a configuration file to lxc-create using "-f", and
	# we don't want to overwrite that information.
	cat >> $config_path <<-EOF

	# This configuration was generated by
	# $(basename $0).

	lxc.utsname = ${name}
	lxc.rootfs = ${rootfs}
	lxc.mount = ${path}/fstab
	lxc.cap.drop = mknod

	lxc.tty = 4
	lxc.pts = 1024

	# Deny all devices.
	lxc.cgroup.devices.deny = a

	# Then grant access to specific devices.
	$(generate_device_permissions)
	EOF
}

create_device_nodes () {
	echo "${devtab}" |
	egrep -v '^#|^$' |
	while read dev type major minor mode; do
		case $type in
			# block and character devices
			(b|c)   if ! [ "$dev" = "-" ]; then
					mknod -m $mode ${rootfs_path}/dev/$dev \
						$type $major $minor
				fi
				;;

			# named pipes (e.g., /dev/log)
			(p)     mkfifo -m $mode ${rootfs_path}/dev/$dev
				;;

			# directories (e.g., /dev/pts)
			(d)     mkdir -m $mode ${rootfs_path}/dev/$dev
				;;
		esac
	done
}

configure_arch () {
	create_device_nodes ||
		die "Failed to create entries in /dev."
}

options=$(getopt -o hp:P:n: -l help,path:,packages:,name: -- "${@}")
if [ ${?} -ne 0 ]; then
	usage >&2
	exit 1
fi
eval set -- "${options}"

while true
do
	case "${1}" in
	-h|--help)      usage && exit 0;;
	-p|--path)      path=${2}; shift 2;;
	-n|--name)      name=${2}; shift 2;;
	-P|--packages)  additional_packages=${2}; shift 2;;
	--)             shift 1; break ;;
	*)              break ;;
	esac
done

[ "${EUID}" = "0" ] ||
	die "This script should be run as 'root'"

[ "${name}" ] ||
	die "missing required 'name' parameter"

[ "${path}" ] ||
	die "Missing required 'path' parameter."

[ -d "${path}" ] ||
	die "Directory ${path} does not exist."

type pacstrap > /dev/null 2>&1 ||
	die "'pacstrap' command is missing, refer to wiki.archlinux.org " \
		"for information about installing pacstrap"

rootfs_path="${path}/rootfs"
config_path="${path}/config"

generate_lxc_conf ||
	die "Failed to generate configuration file."
install_arch ||
	die "Failed to install Arch Linux for ${name}."
configure_arch ||
	die "Failed to configure Arch Linux for ${name}."

echo "Finished creating container ${name}."

