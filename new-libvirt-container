#!/bin/bash

set -u

: ${LIBVIRT_DEFAULT_URI:=lxc:///}

LXC_BASE_DIR=/srv/lxc
LXC_BASE_FS=/dev/lxc/arch-base
LXC_MEMORY=512
LXC_FSSIZE=5g
LXC_NETWORK=network=default

MODE=abort

prog=$(basename $0)
skip_create_domain=0
skip_create_lv=0

die () {
	echo "$prog: ERROR: $*" >&2
	exit 1
}

create_snapshot () {
	if [ "$skip_create_lv" = 1 ]; then
		echo "Using existing ${root_dev}."
	else
		echo "Creating ${root_dev} from ${LXC_BASE_FS}."
		lvcreate -L $LXC_FSSIZE -n ${name}-root -s $LXC_BASE_FS
	fi
}

mount_snapshot () {
	echo "Mounting ${root_dev} on ${root_mount}."
	[ -d "${root_mount}" ] || mkdir ${root_mount}
	mount ${root_dev} ${root_mount}
}

create_container () {
	if [ "$skip_create_domain" = 1 ]; then
		echo "Using existing container ${name}."
	else
		echo "Creating container ${name}."
		virt-install -n ${name} -r ${LXC_MEMORY} \
			-w ${LXC_NETWORK} \
			--filesystem ${root_mount},/ --print-xml |
		virsh define /dev/stdin
	fi
}

configure_container () {
	echo "Configuring ${name}."
	echo ${name} > ${root_mount}/etc/hostname
	systemd-nspawn -D ${root_mount} ssh-keygen -A
}

unmount_snapshot () {
	echo "Unmounting container filesystem."
	umount ${root_mount}
}

usage () {
	prg=$(basename $0)

	cat <<-EOF
	$prg: usage:

	  $prg --help
	  $prg [-r <memory>] [-s <fssize>] [-b <base>] [-w <network>] [-K|-F]
	EOF

OPTS=$(
	getopt -o hr:s:d:b:w:KF \
		--long help,lxc-dir:,base:,memory:,fssize:,network:,keep,force \
		-n "${prog}" -- "$@"
	)

eval set -- "$OPTS"

while :; do
	case "$1" in
		-h|--help) usage; exit;;
		-b|--base) LXC_BASE_FS="$2"; shift 2;;
		-d|--lxc-dir) LXC_BASE_DIR="$2"; shift 2;;
		-r|--memory) LXC_MEMORY=$2; shift 2;;
		-s|--fssize) LXC_FSSIZE=$2; shift 2;;
		-w|--network) LXC_NETWORK=$2; shift 2;;
		-K|--keep) MODE=keep; shift;;
		-F|--force) MODE=force; shift;;

		--) shift; break;;

		*) usage >&1; die "invalid usage";;
	esac
done

name=$1
root_mount=${LXC_BASE_DIR}/${name}
root_dev=${LXC_BASE_FS%/*}/${name}-root

exit

[ "$name" ] || die "you must specify a container name."
[ -d "$root_mount" ] && [ "$(ls -A ${root_mount})" ] &&
	die "directory ${root_mount} exists and is not empty."

if virsh domid ${name} > /dev/null 2>&1; then
	case $MODE in
	abort)	die "found existing container ${name}.  Use --keep to use it or --force to replace it."
		;;
	force)	echo "Deleting existing container ${name}."
		virsh destroy ${name}
		virsh undefine ${name}
		;;
	keep)	skip_create_domain=1
		;;
	esac
fi

if lvs ${root_dev} > /dev/null 2>&1; then
	case $MODE in
	abort)	die "found existing device ${root_dev}.  Use --keep to use it or --force to replace it."
		;;
	force)	echo "Deleting existing LV ${root_dev}."
		lvremove -f ${root_dev}
		;;
	keep)	skip_create_lv=1
		;;
	esac
fi

set -e

create_snapshot
mount_snapshot
create_container
configure_container
unmount_snapshot

